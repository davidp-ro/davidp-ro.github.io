import './Introduction.svelte.css.proxy.js';
/* src\pages\components\home\Introduction.svelte generated by Svelte v3.32.2 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_bidirectional_transition,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../../_snowpack/pkg/svelte/internal.js";

import { mediaQuery } from "../../../stores.js";
import { fade } from "../../../../_snowpack/pkg/svelte/transition.js";

function create_if_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "column");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (33:4) {#if (isVisible && $mediaQuery === "desktop")}
function create_if_block_2(ctx) {
	let br0;
	let t0;
	let br1;
	let t1;
	let h5;
	let t2;
	let h5_transition;
	let current;

	return {
		c() {
			br0 = element("br");
			t0 = space();
			br1 = element("br");
			t1 = space();
			h5 = element("h5");
			t2 = text(/*descText*/ ctx[2]);
			attr(h5, "class", "is-size-5");
		},
		m(target, anchor) {
			insert(target, br0, anchor);
			insert(target, t0, anchor);
			insert(target, br1, anchor);
			insert(target, t1, anchor);
			insert(target, h5, anchor);
			append(h5, t2);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*descText*/ 4) set_data(t2, /*descText*/ ctx[2]);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!h5_transition) h5_transition = create_bidirectional_transition(h5, fade, { duration: 100 }, true);
				h5_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!h5_transition) h5_transition = create_bidirectional_transition(h5, fade, { duration: 100 }, false);
			h5_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(br0);
			if (detaching) detach(t0);
			if (detaching) detach(br1);
			if (detaching) detach(t1);
			if (detaching) detach(h5);
			if (detaching && h5_transition) h5_transition.end();
		}
	};
}

// (60:6) {#if $mediaQuery !== "desktop"}
function create_if_block_1(ctx) {
	let h5;
	let t;

	return {
		c() {
			h5 = element("h5");
			t = text(/*descText*/ ctx[2]);
			attr(h5, "class", "is-size-5 mt-4");
		},
		m(target, anchor) {
			insert(target, h5, anchor);
			append(h5, t);
		},
		p(ctx, dirty) {
			if (dirty & /*descText*/ 4) set_data(t, /*descText*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(h5);
		}
	};
}

// (65:2) {#if $mediaQuery === "desktop"}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "column");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let t0;
	let div0;
	let h3;
	let t2;
	let h1;
	let t4;
	let t5;
	let div1;
	let figure;
	let img;
	let img_src_value;
	let t6;
	let t7;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*$mediaQuery*/ ctx[3] === "desktop" && create_if_block_3(ctx);
	let if_block1 = /*isVisible*/ ctx[0] && /*$mediaQuery*/ ctx[3] === "desktop" && create_if_block_2(ctx);
	let if_block2 = /*$mediaQuery*/ ctx[3] !== "desktop" && create_if_block_1(ctx);
	let if_block3 = /*$mediaQuery*/ ctx[3] === "desktop" && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			h3 = element("h3");
			h3.textContent = "Hi! I'm";
			t2 = space();
			h1 = element("h1");
			h1.textContent = "David Pescariu";
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			div1 = element("div");
			figure = element("figure");
			img = element("img");
			t6 = space();
			if (if_block2) if_block2.c();
			t7 = space();
			if (if_block3) if_block3.c();
			attr(h3, "class", "is-size-3 mt-5 mb-0");
			attr(h1, "class", "title is-size-1 my-0");
			attr(div0, "class", "column");
			attr(img, "class", "is-rounded svelte-1px73g6");
			if (img.src !== (img_src_value = "assets/profile.jpg")) attr(img, "src", img_src_value);
			attr(img, "alt", "Profile");
			attr(figure, "class", "image");
			attr(div1, "class", "column is-narrow-desktop");
			attr(div2, "class", "columns");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			append(div2, div0);
			append(div0, h3);
			append(div0, t2);
			append(div0, h1);
			append(div0, t4);
			if (if_block1) if_block1.m(div0, null);
			append(div2, t5);
			append(div2, div1);
			append(div1, figure);
			append(figure, img);
			append(figure, t6);
			if (if_block2) if_block2.m(figure, null);
			append(div2, t7);
			if (if_block3) if_block3.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(img, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(img, "mouseout", /*mouseout_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$mediaQuery*/ ctx[3] === "desktop") {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*isVisible*/ ctx[0] && /*$mediaQuery*/ ctx[3] === "desktop") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*isVisible, $mediaQuery*/ 9) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*$mediaQuery*/ ctx[3] !== "desktop") {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(figure, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*$mediaQuery*/ ctx[3] === "desktop") {
				if (if_block3) {
					
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					if_block3.m(div2, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function getRandomColor() {
	let color = randomColor({ luminosity: "dark" });
	document.documentElement.style.setProperty("--imageShadowColor", `${color}cc`);
}

function instance($$self, $$props, $$invalidate) {
	let $mediaQuery;
	component_subscribe($$self, mediaQuery, $$value => $$invalidate(3, $mediaQuery = $$value));
	let isVisible = true;
	let hoverCounter = 0;
	let descText = "Student & Developer from Romania";

	if ($mediaQuery === "desktop") {
		document.getElementsByTagName("html")[0].classList.add("is-clipped");
	}

	function fadeInOut() {
		$$invalidate(0, isVisible = false);

		setTimeout(
			() => {
				$$invalidate(0, isVisible = true);
			},
			200
		);
	}

	const mouseenter_handler = () => {
		getRandomColor();
		fadeInOut();
		$$invalidate(1, hoverCounter++, hoverCounter);
		$$invalidate(2, descText = "Handsome lad eh?");
	};

	const mouseout_handler = () => {
		fadeInOut();

		if (hoverCounter % 5 === 0) {
			$$invalidate(2, descText = "Having fun? :)");
		} else {
			$$invalidate(2, descText = "Student & Developer from Romania");
		}
	};

	return [
		isVisible,
		hoverCounter,
		descText,
		$mediaQuery,
		fadeInOut,
		mouseenter_handler,
		mouseout_handler
	];
}

class Introduction extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Introduction;