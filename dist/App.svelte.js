/* src\App.svelte generated by Svelte v3.32.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { page } from "./stores.js";

// import CookieManager from "./cookieManager";
import Home from "./pages/Home.svelte.js";

import About from "./pages/About.svelte.js";
import Work from "./pages/Work.svelte.js";
import Contact from "./pages/Contact.svelte.js";
import Consent from "./pages/components/Consent.svelte.js";
import MediaQuery from "./MediaQuery.svelte.js";
import UpdateMQ from "./UpdateMQ.svelte.js";

function create_if_block_6(ctx) {
	let updatemq;
	let current;
	updatemq = new UpdateMQ({ props: { newMediaQuery: "desktop" } });

	return {
		c() {
			create_component(updatemq.$$.fragment);
		},
		m(target, anchor) {
			mount_component(updatemq, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(updatemq.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(updatemq.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(updatemq, detaching);
		}
	};
}

// (30:2) <MediaQuery query="(min-width: 1024px)" let:matches>
function create_default_slot_2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*matches*/ ctx[1] && create_if_block_6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*matches*/ ctx[1]) {
				if (if_block) {
					if (dirty & /*matches*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_6(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (36:4) {#if matches}
function create_if_block_5(ctx) {
	let updatemq;
	let current;
	updatemq = new UpdateMQ({ props: { newMediaQuery: "tablet" } });

	return {
		c() {
			create_component(updatemq.$$.fragment);
		},
		m(target, anchor) {
			mount_component(updatemq, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(updatemq.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(updatemq.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(updatemq, detaching);
		}
	};
}

// (35:2) <MediaQuery query="(min-width: 769px) and (max-width: 1023px)" let:matches>
function create_default_slot_1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*matches*/ ctx[1] && create_if_block_5(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*matches*/ ctx[1]) {
				if (if_block) {
					if (dirty & /*matches*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (41:4) {#if matches}
function create_if_block_4(ctx) {
	let updatemq;
	let current;
	updatemq = new UpdateMQ({ props: { newMediaQuery: "mobile" } });

	return {
		c() {
			create_component(updatemq.$$.fragment);
		},
		m(target, anchor) {
			mount_component(updatemq, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(updatemq.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(updatemq.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(updatemq, detaching);
		}
	};
}

// (40:2) <MediaQuery query="(max-width: 768px)" let:matches>
function create_default_slot(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*matches*/ ctx[1] && create_if_block_4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*matches*/ ctx[1]) {
				if (if_block) {
					if (dirty & /*matches*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (53:2) {:else}
function create_else_block(ctx) {
	let home;
	let current;
	home = new Home({});

	return {
		c() {
			create_component(home.$$.fragment);
		},
		m(target, anchor) {
			mount_component(home, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(home.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(home.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(home, detaching);
		}
	};
}

// (51:32) 
function create_if_block_3(ctx) {
	let contact;
	let current;
	contact = new Contact({});

	return {
		c() {
			create_component(contact.$$.fragment);
		},
		m(target, anchor) {
			mount_component(contact, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(contact.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(contact.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(contact, detaching);
		}
	};
}

// (49:29) 
function create_if_block_2(ctx) {
	let work;
	let current;
	work = new Work({});

	return {
		c() {
			create_component(work.$$.fragment);
		},
		m(target, anchor) {
			mount_component(work, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(work.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(work.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(work, detaching);
		}
	};
}

// (47:2) {#if $page === "about"}
function create_if_block_1(ctx) {
	let about;
	let current;
	about = new About({});

	return {
		c() {
			create_component(about.$$.fragment);
		},
		m(target, anchor) {
			mount_component(about, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(about.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(about.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(about, detaching);
		}
	};
}

// (58:2) {#if showConsentPrompt}
function create_if_block(ctx) {
	let consent;
	let current;
	consent = new Consent({});

	return {
		c() {
			create_component(consent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(consent, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(consent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(consent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(consent, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let mediaquery0;
	let t0;
	let mediaquery1;
	let t1;
	let mediaquery2;
	let t2;
	let current_block_type_index;
	let if_block0;
	let t3;
	let current;

	mediaquery0 = new MediaQuery({
			props: {
				query: "(min-width: 1024px)",
				$$slots: {
					default: [
						create_default_slot_2,
						({ matches }) => ({ 1: matches }),
						({ matches }) => matches ? 2 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	mediaquery1 = new MediaQuery({
			props: {
				query: "(min-width: 769px) and (max-width: 1023px)",
				$$slots: {
					default: [
						create_default_slot_1,
						({ matches }) => ({ 1: matches }),
						({ matches }) => matches ? 2 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	mediaquery2 = new MediaQuery({
			props: {
				query: "(max-width: 768px)",
				$$slots: {
					default: [
						create_default_slot,
						({ matches }) => ({ 1: matches }),
						({ matches }) => matches ? 2 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	const if_block_creators = [create_if_block_1, create_if_block_2, create_if_block_3, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$page*/ ctx[0] === "about") return 0;
		if (/*$page*/ ctx[0] === "work") return 1;
		if (/*$page*/ ctx[0] === "contact") return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = showConsentPrompt && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			create_component(mediaquery0.$$.fragment);
			t0 = space();
			create_component(mediaquery1.$$.fragment);
			t1 = space();
			create_component(mediaquery2.$$.fragment);
			t2 = space();
			if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			attr(div, "class", "App");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(mediaquery0, div, null);
			append(div, t0);
			mount_component(mediaquery1, div, null);
			append(div, t1);
			mount_component(mediaquery2, div, null);
			append(div, t2);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const mediaquery0_changes = {};

			if (dirty & /*$$scope, matches*/ 6) {
				mediaquery0_changes.$$scope = { dirty, ctx };
			}

			mediaquery0.$set(mediaquery0_changes);
			const mediaquery1_changes = {};

			if (dirty & /*$$scope, matches*/ 6) {
				mediaquery1_changes.$$scope = { dirty, ctx };
			}

			mediaquery1.$set(mediaquery1_changes);
			const mediaquery2_changes = {};

			if (dirty & /*$$scope, matches*/ 6) {
				mediaquery2_changes.$$scope = { dirty, ctx };
			}

			mediaquery2.$set(mediaquery2_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t3);
			}
		},
		i(local) {
			if (current) return;
			transition_in(mediaquery0.$$.fragment, local);
			transition_in(mediaquery1.$$.fragment, local);
			transition_in(mediaquery2.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(mediaquery0.$$.fragment, local);
			transition_out(mediaquery1.$$.fragment, local);
			transition_out(mediaquery2.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(mediaquery0);
			destroy_component(mediaquery1);
			destroy_component(mediaquery2);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};
}

let showConsentPrompt = false;

function instance($$self, $$props, $$invalidate) {
	let $page;
	component_subscribe($$self, page, $$value => $$invalidate(0, $page = $$value));
	return [$page];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;